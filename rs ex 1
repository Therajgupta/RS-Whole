âœ… Experiment No. 1
Aim:
To analyze the functions and performance of a recommender system using a real-world dataset such as movies or products.

Objective:
To understand how a recommender system suggests items based on user preferences and behaviors.

Theory:
Recommender systems suggest items using techniques like:

Collaborative Filtering (User-based & Item-based)
Content-Based Filtering
Hybrid Methods
Challenges include:
Cold-start problem
Data sparsity
Scalability

Program Code (Python):

import pandas as pd 
from sklearn.feature_extraction.text import TfidfVectorizer 
from sklearn.metrics.pairwise import cosine_similarity 

df = pd.read_csv('/content/sample_data/movie_dataset.csv') 
df['genres'] = df['genres'].fillna('') 

vectorizer = TfidfVectorizer(stop_words='english') 
tfidf_matrix = vectorizer.fit_transform(df['genres']) 
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix) 

top_similar_movies = pd.DataFrame(cosine_sim, index=df['title'], columns=df['title']).round(3)

for movie in df['title'][:5]:   
    top_similar = top_similar_movies[movie].nlargest(6)[1:]   
    print(f"\n{movie}:") 
    print(top_similar)

def get_recommendations_based_on_genre(df, cosine_sim, top_n=5): 
    genre_counts = df['genres'].str.split('|').explode().value_counts() 
    most_watched_genre = genre_counts.idxmax() 
    genre_filtered_df = df[df['genres'].str.contains(most_watched_genre, case=False, na=False)] 
    recommended_movies = [] 
    for movie in genre_filtered_df['title']: 
        idx = df[df['title'] == movie].index[0] 
        sim_scores = list(enumerate(cosine_sim[idx])) 
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1] 
        movie_indices = [i[0] for i in sim_scores] 
        recommended_movies.extend(df['title'].iloc[movie_indices].tolist()) 
    return list(set(recommended_movies))[:top_n] 

def evaluate_recommendation_based_on_genre(df, cosine_sim): 
    recs = get_recommendations_based_on_genre(df, cosine_sim) 
    if recs: 
        print("\nTop 5 Recommended Movies from the Most Watched Genre:") 
        for movie in recs: 
            print(movie)
    else: 
        print("No recommendations based on the most watched genre.") 

evaluate_recommendation_based_on_genre(df, cosine_sim)

Output (Expected):
Top 5 similar movies for each input movie based on genre.
5 recommendations from the most popular genre.

Conclusion:
This experiment demonstrates how recommender systems provide personalized suggestions using cosine similarity and collaborative filtering techniques. It highlights the real-world use of such systems in platforms like Netflix or Amazon.

